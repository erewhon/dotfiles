arch_name="$(uname -m)"
os_name="$(uname -s)"

if [[ "${os_name}" == "Darwin" ]]; then
    # MacOS.  Distinguish between M1 and x86.
    JULIA=/Applications/Julia-1.8.app/Contents/Resources/julia
    if [[ "${arch_name}" == "arm64" ]]; then
        export HOMEBREW_PREFIX="/opt/homebrew";
        export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
        export HOMEBREW_REPOSITORY="/opt/homebrew";
        export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:${JULIA}/bin${PATH+:$PATH}";
        export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:";
        export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}";
    else
        export HOMEBREW_PREFIX="/usr/local";
        export HOMEBREW_CELLAR="/usr/local/Cellar";
        export HOMEBREW_REPOSITORY="/usr/local/Homebrew";
        export PATH="/usr/local/bin:/usr/local/sbin${PATH+:$PATH}";
        export MANPATH="/usr/local/share/man${MANPATH+:$MANPATH}:";
        export INFOPATH="/usr/local/share/info:${INFOPATH:-}";
    fi

    # MacOS has a problem with tmux-256color
    if [[ "$TERM" == "tmux-256color" ]]; then
        TERM="screen-256color"
    fi
else
    # For Linux and others, we add /usr/local/bin and /usr/local/sbin unconditionally
    export PATH="/usr/local/opt/python-3.9.7/bin:/usr/local/bin:/usr/local/sbin${PATH+:$PATH}";
fi

#
# Stuff to only run in interactive shells and *not* in TMUX?
#
if [[ -o login ]]; then
    #
    # We don't want to go overboard (honest!), so display neofetch once per day, then fortune
    #
    NOW=$( date +'%F %H:%M' )

    if ! cmp -s $XDG_CACHE_HOME/.last_neofetch <( echo $NOW )
    then
        echo $NOW > $XDG_CACHE_HOME/.last_neofetch

        if command -v neofetch 2>&1 > /dev/null; then
            if [[ -z "$TMUX" ]]; then
                neofetch --kitty $HOME/Documents/Pictures/Backgrounds/Unsplash/
            else
                neofetch
            fi
        fi
    else
        # do nothing for now...   nice and clean!
    fi
fi


# export ZSH_THEME=robbyrussell
#
# Layout
#
# line 1:
#   left:  <apple> <dir icon> <path> on <git icon> <branch icon> <branch name> <git status>
#   right: "with " <user> @ <host> at <clock icon> <time>
# line 2:
#   left: >
#   right: <battery icon> <%batt>
#


if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

# Zsh config.   A lot of oh-my-zsh, a lot of other things...
#
export MANPATH="/usr/local/man:$MANPATH"
export DISABLE_AUTO_UPDATE="true"         # Do not auto update oh my zsh.  Chezmoi manages it.
export GPG_TTY=$(tty)

# add elements to path, uniquely
typeset -U path

# set up paths
path=(~/bin
      ~/.cargo/bin
      ~/.local/bin
      ~/.config/doom-emacs/bin
      ~/.krew/bin
      ~/.rd/bin
      /usr/local/opt/python-3.9.7/bin
      ~/Library/Python/3.9/bin
      # /usr/local/bin
      # /usr/local/sbin
      /snap/bin
      /opt/homebrew/opt/postgresql@15/bin
      $path)

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

#
# Set up different languages
#
if command -v go &> /dev/null; then
    export GOPATH=$( go env GOPATH )
    path=($( go env GOPATH )/bin $path)

fi

source $ZDOTDIR/.shellrc

#
# It's the 21st century.  Why are our Unix terminals so boring?  Back
# in the 1980s we had more colorful ANSI terminals.   Well, turns out we
# *can* have color.  We just need to turn on the bling.   And thanks
# to Google, Stackoverflow, and Github Gist's, it's easy!
#

### to add...

ENABLE_CORRECTION="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
HIST_STAMPS="yyyy-mm-dd"
setopt AUTO_CD                       # You can just type a directory and CD there

# https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/jira
#   $JIRA_URL - Your JIRA instance's URL
#   $JIRA_NAME - Your JIRA username; used as the default user for assigned/reported searches
#   $JIRA_PREFIX - Prefix added to issue ID arguments
#   $JIRA_RAPID_BOARD - Set to true if you use Rapid Board
#   $JIRA_DEFAULT_ACTION - Action to do when jira is called with no arguments; defaults to "new"

plugins=(aws
         brew        # aliases of note: brews, bubo, bubu
         chucknorris # chuck, chuck_cow
         docker
         git         # aliases of note: g, ga, gcmsg, gdca
                     #   grup, ggpull, glg, glgp, glo, glol,
                     #   gupa
         golang
         httpie
         history
         kubectl
         mosh
         npm
         ssh-agent
         tmux
         zsh-autosuggestions   # Fish-like auto suggestions
        )

# zstyle :omz:plugins:ssh-agent lazy yes
zstyle :omz:plugins:ssh-agent lifetime 4h

# User configuration

[ ! -d "$XDG_STATE_HOME/zsh" ] && mkdir -p "$XDG_STATE_HOME/zsh"
[ ! -d "$XDG_STATE_HOME/oh-my-zsh" ] && mkdir -p "$XDG_STATE_HOME/oh-my-zsh"

export ZSH=$XDG_STATE_HOME/oh-my-zsh
source $ZSH/oh-my-zsh.sh

unsetopt correct_all
unsetopt correct

export EDITOR="vi"                             # $EDITOR should open in terminal.  Use vi rather than dealing with Emacs session issues
export VERSION_CONTROL=numbered

HISTSIZE=1000000
SAVEHIST=$HISTSIZE

export HISTFILE="$XDG_STATE_HOME"/zsh/history

setopt EXTENDED_HISTORY

compdef _hosts asc
compdef _hosts bsc

#
# Level-up our pager, if possible
#
if command -v bat &> /dev/null; then
    export BAT_THEME=Dracula
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    alias less=bat
    alias gitd='git diff --name-only --diff-filter=d | xargs bat --diff --show-all'
    tailf() { tail -f "$@" | bat --paging=never -l log }
elif [[ -f /usr/bin/batcat ]]; then
    export BAT_THEME=Dracula
    export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
    alias less=batcat
    alias gitd='git diff --name-only --diff-filter=d | xargs batcat --diff --show-all'
    tailf() { tail -f "$@" | batcat --paging=never -l log }
else
    export PAGER=less
    alias gitd='git diff'
    alias tailf='tail -f'
fi

#
# Level-up ls if possible
#
if command -v eza 1>/dev/null 2>&1; then
    unalias l
    unalias ll
    unalias ls

    export EZA_GRID_ROWS=30

    function ls() {
        eza --icons --all --group-directories-first --grid "$@"
    }

    function ll() {
        eza -abghHl --time-style=long-iso --group-directories-first            --git --grid --color=always "$@"
    }

    function lll() {
        eza -abghHl --time-style=long-iso --group-directories-first --extended --git --grid --color=always "$@" | bat --style=plain
    }

    alias tree='eza -abghHl --time-style=long-iso --tree --level=3 --color=always'

    alias l=ll
fi

if command -v nvim 1>/dev/null 2>&1; then
    alias vi=nvim

    export EDITOR="nvim"                          # $EDITOR should open in terminal.  Use vi rather than dealing with Emacs session issues
fi


if command -v duf 1>/dev/null 2>&1; then
   alias df=duf
fi

# zoxide = directory jumping utility
if command -v zoxide 1>/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# stern = kubernetes log viewer
if command -v stern 1>/dev/null 2>&1; then
    source <(stern --completion=zsh)
fi

if command -v goose &> /dev/null; then
    # Below lifted from https://block.github.io/goose/blog/2025/05/12/local-goose-qwen3/
    # zsh helper to use goose if you make a typo or just want to yolo into the shell
    #command_not_found_handler() {
    #  local cmd="$*"
    #  echo "ðŸª¿:"
    #  goose run -t "can you try to run this command please: $cmd"
    #}
    command_not_found_handler() {
      local cmd="$*"
      echo "ðŸª¿:"
      GOOSE_PROVIDER=ollama GOOSE_MODEL=michaelneale/qwen3 goose run -t "can you try to run this command please: $cmd"
    }
fi

#
#
# Kubenetes configuration.  ("N" modifier doesn't error if no match.)
#
export KUBECONFIG="$HOME/.kube/config"

for file in $HOME/.kube/config-files/*.{yml,yaml}(N)
do
  export KUBECONFIG="$file:$KUBECONFIG"
done

#
# Only show message of the day when it changes, otherwise suppress it.
#
if [[ -f /etc/motd ]]; then
    cmp -s /etc/motd ~/.hushlogin ||
        tee ~/.hushlogin < /etc/motd
fi

#
# Emacs vterm
#
vterm_printf(){
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
}

add-zsh-hook chpwd vterm_prompt_end

#
# Enhanced history.
#   https://raehik.github.io/2014/10/12/record-additional-full-zsh-history/
#
zshaddhistory() {
    # prepend the current epoch time
    # $1 includes terminating newline already (see zshmisc(1))
    echo -n "$(date "+%s") $1" >> "$HOME/.zsh_full_history"
}

# clean up the line when exiting with Ctrl-D                                    
# if Ctrl-D is hit, there isn't a terminating newline -- so we'll add a  
# useful message which probably won't ever be written (! specifies an    
# event, so it'll only work surrounded in quotes                         
# zshexit() {
#    echo "!EXIT! $(date "+%s")" >> "$HOME/.zsh_full_history"
# }

#
# Switched from McFly to Atuin
#
if command -v atuin &> /dev/null; then
    eval "$(atuin init zsh)"
fi

#
# experimental: McFly.  Need to troubleshoot why this sometimes doesn't seem to bind!
#
#if command -v mcfly &> /dev/null; then
#    # export MCFLY_FUZZY=true
#    source $ZDOTDIR/mcfly.zsh
#fi

sources=(
    "/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "$HOME/.zshrc-local"
    "$ZDOTDIR/.p10k.zsh"
    "$(brew --prefix asdf)/libexec/asdf.sh"
    "$HOME/.config/broot/launcher/bash/br"
    "$HOME/creds.env"
)

paths=(
    "$HOME/Projects/erewhon/content-tools"
    "$HOME/.claude/local"
)

for file in $sources
do
  [[ -s "$file" ]] && source "$file"
done

for dir in $paths
do
    [[ -s "$dir" ]] && export PATH="${dir}:${PATH}"
done

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"
